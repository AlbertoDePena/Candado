<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>ResultExtensions</name></assembly>
<members>
<member name="M:ResultExtensions.ResultOperators.op_GreaterEqualsGreater``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``1,``2}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpResult{``3,``2}})">
<summary>
 Compose two switches into another switch
</summary>
</member>
<member name="M:ResultExtensions.ResultOperators.op_GreaterGreaterEquals``3(Microsoft.FSharp.Core.FSharpResult{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``2,``1}})">
<summary>
 Pipe a Result&lt;&apos;T, &apos;TError&gt; value into a switch function 
</summary>
</member>
<member name="T:ResultExtensions.ResultOperators">
<summary>
 (&gt;&gt;=) Pipe a Result&lt;&apos;T, &apos;TError&gt; value into a switch function.
 (&gt;=&gt;) Compose two switches into another switch.
 Note: &gt;&gt; Result.map is the same as &gt;=&gt; Result.switch
</summary>
</member>
<member name="M:ResultExtensions.Result.plus``5(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``3,``3}},Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpResult{``0,``3}},Microsoft.FSharp.Core.FSharpFunc{``4,Microsoft.FSharp.Core.FSharpResult{``1,``3}},``4)">
<summary>
 Add two switches in parallel
</summary>
</member>
<member name="M:ResultExtensions.Result.failIfNone``2(``0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpResult{``1,``0}})">
<summary>
 Given a Result&lt;&apos;T, &apos;TError&gt; option, return it 
 or error it with the given message if None
</summary>
</member>
<member name="M:ResultExtensions.Result.valueOr``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpResult{``1,``0})">
<summary>
 Given a Result&lt;&apos;T, &apos;TError&gt;, in the Ok case, return the value.
 In the Error case, determine the value to return by 
 applying a function to the result
</summary>
</member>
<member name="M:ResultExtensions.Result.doubleMap``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3})">
<summary>
 Convert two one-track functions into a Result&lt;&apos;T, &apos;TError&gt; function
</summary>
</member>
<member name="M:ResultExtensions.Result.tryCatch``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{System.Exception,``2},``0)">
<summary>
 Convert a one-track function into a switch with exception handler
</summary>
</member>
<member name="M:ResultExtensions.Result.tee``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0)">
<summary>
 Convert a dead-end function into a one-track function
</summary>
</member>
<member name="M:ResultExtensions.Result.mapOption``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 Convert an option into a Result&lt;&apos;T, &apos;TError&gt; function
</summary>
</member>
<member name="M:ResultExtensions.Result.mapChoice``2(Microsoft.FSharp.Core.FSharpChoice{``0,``1})">
<summary>
 Convert a choice into a Result&lt;&apos;T, &apos;TError&gt; function
</summary>
</member>
<member name="M:ResultExtensions.Result.switch``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Convert a one-track function into a switch
</summary>
</member>
<member name="M:ResultExtensions.Result.either``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``1},Microsoft.FSharp.Core.FSharpResult{``0,``2})">
<summary>
 Apply Ok or Error function
</summary>
</member>
</members>
</doc>
